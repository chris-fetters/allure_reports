{"uid":"7dde7ce5e5af31b7","name":"Feature Test for pet dog","fullName":"test_set_two.test_sample.TestAnimals#test_animals","historyId":"3fc50aa8b69edb19fed12a42df7959ce","time":{"start":1727902423283,"stop":1727902423284,"duration":1},"description":"This test will validate that the first charater of the test pet matches a random pet","descriptionHtml":"<p>This test will validate that the first charater of the test pet matches a random pet</p>\n","status":"failed","statusMessage":"AssertionError: First characters of the pets do not match: Random Pet: parrot vs. Test Pet dog\nassert 'p' == 'd'\n  \n  - d\n  + p","statusTrace":"self = <test_set_two.test_sample.TestAnimals object at 0x7fbb51bff3e0>\npet = 'dog'\n\n    @allure.description(\"This test will validate that the first charater of the test pet matches a random pet\")\n    @pytest.mark.parametrize(\"pet\",[\"dog\",\"cat\",\"ferret\",\"iguana\"])\n    def test_animals(self,pet)->None:\n        with allure.step(\"Arrange\"):\n            allure.dynamic.title(f\"Feature Test for pet {pet}\")\n            random_choices = [\"snake\",\"alligator\",\"parrot\",\"goat\"]\n    \n        with allure.step(\"Execute\"):\n            choice = random.choice(random_choices)\n            choice_char = choice[0]\n            test_char = pet[0]\n        with allure.step(\"Assert\"):\n>           assert choice_char == test_char, f\"First characters of the pets do not match: Random Pet: {choice} vs. Test Pet {pet}\"\nE           AssertionError: First characters of the pets do not match: Random Pet: parrot vs. Test Pet dog\nE           assert 'p' == 'd'\nE             \nE             - d\nE             + p\n\ntest_set_two/test_sample.py:20: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test will validate that the first charater of the test pet matches a random pet","status":"failed","statusMessage":"AssertionError: First characters of the pets do not match: Random Pet: parrot vs. Test Pet dog\nassert 'p' == 'd'\n  \n  - d\n  + p","statusTrace":"self = <test_set_two.test_sample.TestAnimals object at 0x7fbb51bff3e0>\npet = 'dog'\n\n    @allure.description(\"This test will validate that the first charater of the test pet matches a random pet\")\n    @pytest.mark.parametrize(\"pet\",[\"dog\",\"cat\",\"ferret\",\"iguana\"])\n    def test_animals(self,pet)->None:\n        with allure.step(\"Arrange\"):\n            allure.dynamic.title(f\"Feature Test for pet {pet}\")\n            random_choices = [\"snake\",\"alligator\",\"parrot\",\"goat\"]\n    \n        with allure.step(\"Execute\"):\n            choice = random.choice(random_choices)\n            choice_char = choice[0]\n            test_char = pet[0]\n        with allure.step(\"Assert\"):\n>           assert choice_char == test_char, f\"First characters of the pets do not match: Random Pet: {choice} vs. Test Pet {pet}\"\nE           AssertionError: First characters of the pets do not match: Random Pet: parrot vs. Test Pet dog\nE           assert 'p' == 'd'\nE             \nE             - d\nE             + p\n\ntest_set_two/test_sample.py:20: AssertionError","steps":[{"name":"Arrange","time":{"start":1727902423283,"stop":1727902423283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Execute","time":{"start":1727902423283,"stop":1727902423283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Assert","time":{"start":1727902423283,"stop":1727902423283,"duration":0},"status":"failed","statusMessage":"AssertionError: First characters of the pets do not match: Random Pet: parrot vs. Test Pet dog\nassert 'p' == 'd'\n  \n  - d\n  + p\n","statusTrace":"  File \"/home/runner/work/allure_reports/allure_reports/test_set_two/test_sample.py\", line 20, in test_animals\n    assert choice_char == test_char, f\"First characters of the pets do not match: Random Pet: {choice} vs. Test Pet {pet}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"Pets"},{"name":"parentSuite","value":"test_set_two"},{"name":"suite","value":"test_sample"},{"name":"subSuite","value":"TestAnimals"},{"name":"host","value":"fv-az1383-969"},{"name":"thread","value":"2132-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_set_two.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"pet","value":"'dog'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7dde7ce5e5af31b7.json","parameterValues":["'dog'"]}