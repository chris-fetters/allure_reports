{"uid":"d632160d14bd0660","name":"Feature Test for pet iguana","fullName":"test_set_two.test_sample.TestAnimals#test_animals","historyId":"5c866e83389c5d5cbc626536359ece65","time":{"start":1727902818398,"stop":1727902818398,"duration":0},"description":"This test will validate that the first charater of the test pet matches a random pet","descriptionHtml":"<p>This test will validate that the first charater of the test pet matches a random pet</p>\n","status":"failed","statusMessage":"AssertionError: First characters of the pets do not match: Random Pet: snake vs. Test Pet iguana\nassert 's' == 'i'\n  \n  - i\n  + s","statusTrace":"self = <test_set_two.test_sample.TestAnimals object at 0x7f8231d7bc50>\npet = 'iguana'\n\n    @allure.description(\"This test will validate that the first charater of the test pet matches a random pet\")\n    @pytest.mark.parametrize(\"pet\",[\"dog\",\"cat\",\"ferret\",\"iguana\"])\n    def test_animals(self,pet)->None:\n        with allure.step(\"Arrange\"):\n            allure.dynamic.title(f\"Feature Test for pet {pet}\")\n            random_choices = [\"snake\",\"alligator\",\"parrot\",\"goat\"]\n    \n        with allure.step(\"Execute\"):\n            choice = random.choice(random_choices)\n            choice_char = choice[0]\n            test_char = pet[0]\n        with allure.step(\"Assert\"):\n>           assert choice_char == test_char, f\"First characters of the pets do not match: Random Pet: {choice} vs. Test Pet {pet}\"\nE           AssertionError: First characters of the pets do not match: Random Pet: snake vs. Test Pet iguana\nE           assert 's' == 'i'\nE             \nE             - i\nE             + s\n\ntest_set_two/test_sample.py:20: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test will validate that the first charater of the test pet matches a random pet","status":"failed","statusMessage":"AssertionError: First characters of the pets do not match: Random Pet: snake vs. Test Pet iguana\nassert 's' == 'i'\n  \n  - i\n  + s","statusTrace":"self = <test_set_two.test_sample.TestAnimals object at 0x7f8231d7bc50>\npet = 'iguana'\n\n    @allure.description(\"This test will validate that the first charater of the test pet matches a random pet\")\n    @pytest.mark.parametrize(\"pet\",[\"dog\",\"cat\",\"ferret\",\"iguana\"])\n    def test_animals(self,pet)->None:\n        with allure.step(\"Arrange\"):\n            allure.dynamic.title(f\"Feature Test for pet {pet}\")\n            random_choices = [\"snake\",\"alligator\",\"parrot\",\"goat\"]\n    \n        with allure.step(\"Execute\"):\n            choice = random.choice(random_choices)\n            choice_char = choice[0]\n            test_char = pet[0]\n        with allure.step(\"Assert\"):\n>           assert choice_char == test_char, f\"First characters of the pets do not match: Random Pet: {choice} vs. Test Pet {pet}\"\nE           AssertionError: First characters of the pets do not match: Random Pet: snake vs. Test Pet iguana\nE           assert 's' == 'i'\nE             \nE             - i\nE             + s\n\ntest_set_two/test_sample.py:20: AssertionError","steps":[{"name":"Arrange","time":{"start":1727902818398,"stop":1727902818398,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Execute","time":{"start":1727902818398,"stop":1727902818398,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Assert","time":{"start":1727902818398,"stop":1727902818398,"duration":0},"status":"failed","statusMessage":"AssertionError: First characters of the pets do not match: Random Pet: snake vs. Test Pet iguana\nassert 's' == 'i'\n  \n  - i\n  + s\n","statusTrace":"  File \"/home/runner/work/allure_reports/allure_reports/test_set_two/test_sample.py\", line 20, in test_animals\n    assert choice_char == test_char, f\"First characters of the pets do not match: Random Pet: {choice} vs. Test Pet {pet}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"Pets"},{"name":"parentSuite","value":"test_set_two"},{"name":"suite","value":"test_sample"},{"name":"subSuite","value":"TestAnimals"},{"name":"host","value":"fv-az700-494"},{"name":"thread","value":"2120-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_set_two.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"pet","value":"'iguana'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"92f72dbfbf461524","reportUrl":"https://chris-fetters.github.io/allure_reports/14//#testresult/92f72dbfbf461524","status":"failed","statusDetails":"AssertionError: First characters of the pets do not match: Random Pet: snake vs. Test Pet iguana\nassert 's' == 'i'\n  \n  - i\n  + s","time":{"start":1727902423314,"stop":1727902423314,"duration":0}}]},"tags":[]},"source":"d632160d14bd0660.json","parameterValues":["'iguana'"]}