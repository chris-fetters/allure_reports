{"uid":"626afdee5c96fdba","name":"Feature 1 Test 1 for fruit apple","fullName":"test_set_one.test_sample.TestFruit#test_fruit","historyId":"58c871c8b3f029061302d9d604f50d00","time":{"start":1727960173818,"stop":1727960173818,"duration":0},"description":"This test will validate that the first charater of the test fruit matches a random fruit","descriptionHtml":"<p>This test will validate that the first charater of the test fruit matches a random fruit</p>\n","status":"failed","statusMessage":"AssertionError: First characters of the fruits do not match: Random Fruit: pear vs. Test Fruit apple\nassert 'p' == 'a'\n  \n  - a\n  + p","statusTrace":"self = <test_set_one.test_sample.TestFruit object at 0x7fafc109f9e0>\nfruit = 'apple'\n\n    @allure.description(\"This test will validate that the first charater of the test fruit matches a random fruit\")\n    @pytest.mark.parametrize(\"fruit\",[\"apple\",\"orange\",\"pear\",\"peach\"])\n    def test_fruit(self,fruit)->None:\n        with allure.step(\"Arrange\"):\n            allure.dynamic.title(f\"Feature 1 Test 1 for fruit {fruit}\")\n            my_fruits = [\"apple\",\"pear\",\"peach\",\"kiwi\"]\n    \n        with allure.step(\"Execute\"):\n            my_fruit = random.choice(my_fruits)\n            my_fruit_char = my_fruit[0]\n            test_fruit_char = fruit[0]\n        with allure.step(\"Assert\"):\n>           assert my_fruit_char == test_fruit_char, f\"First characters of the fruits do not match: Random Fruit: {my_fruit} vs. Test Fruit {fruit}\"\nE           AssertionError: First characters of the fruits do not match: Random Fruit: pear vs. Test Fruit apple\nE           assert 'p' == 'a'\nE             \nE             - a\nE             + p\n\ntest_set_one/test_sample.py:20: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test will validate that the first charater of the test fruit matches a random fruit","status":"failed","statusMessage":"AssertionError: First characters of the fruits do not match: Random Fruit: pear vs. Test Fruit apple\nassert 'p' == 'a'\n  \n  - a\n  + p","statusTrace":"self = <test_set_one.test_sample.TestFruit object at 0x7fafc109f9e0>\nfruit = 'apple'\n\n    @allure.description(\"This test will validate that the first charater of the test fruit matches a random fruit\")\n    @pytest.mark.parametrize(\"fruit\",[\"apple\",\"orange\",\"pear\",\"peach\"])\n    def test_fruit(self,fruit)->None:\n        with allure.step(\"Arrange\"):\n            allure.dynamic.title(f\"Feature 1 Test 1 for fruit {fruit}\")\n            my_fruits = [\"apple\",\"pear\",\"peach\",\"kiwi\"]\n    \n        with allure.step(\"Execute\"):\n            my_fruit = random.choice(my_fruits)\n            my_fruit_char = my_fruit[0]\n            test_fruit_char = fruit[0]\n        with allure.step(\"Assert\"):\n>           assert my_fruit_char == test_fruit_char, f\"First characters of the fruits do not match: Random Fruit: {my_fruit} vs. Test Fruit {fruit}\"\nE           AssertionError: First characters of the fruits do not match: Random Fruit: pear vs. Test Fruit apple\nE           assert 'p' == 'a'\nE             \nE             - a\nE             + p\n\ntest_set_one/test_sample.py:20: AssertionError","steps":[{"name":"Arrange","time":{"start":1727960173818,"stop":1727960173818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Execute","time":{"start":1727960173818,"stop":1727960173818,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Assert","time":{"start":1727960173818,"stop":1727960173818,"duration":0},"status":"failed","statusMessage":"AssertionError: First characters of the fruits do not match: Random Fruit: pear vs. Test Fruit apple\nassert 'p' == 'a'\n  \n  - a\n  + p\n","statusTrace":"  File \"/home/runner/work/allure_reports/allure_reports/test_set_one/test_sample.py\", line 20, in test_fruit\n    assert my_fruit_char == test_fruit_char, f\"First characters of the fruits do not match: Random Fruit: {my_fruit} vs. Test Fruit {fruit}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"Fruits"},{"name":"parentSuite","value":"test_set_one"},{"name":"suite","value":"test_sample"},{"name":"subSuite","value":"TestFruit"},{"name":"host","value":"fv-az661-183"},{"name":"thread","value":"2155-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_set_one.test_sample"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"fruit","value":"'apple'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"98db7477a9f3910b","reportUrl":"https://chris-fetters.github.io/allure_reports/15//#testresult/98db7477a9f3910b","status":"failed","statusDetails":"AssertionError: First characters of the fruits do not match: Random Fruit: pear vs. Test Fruit apple\nassert 'p' == 'a'\n  \n  - a\n  + p","time":{"start":1727903121765,"stop":1727903121765,"duration":0}},{"uid":"32dececdd716f9a5","reportUrl":"https://chris-fetters.github.io/allure_reports/13//#testresult/32dececdd716f9a5","status":"failed","statusDetails":"AssertionError: First characters of the fruits do not match: Random Fruit: pear vs. Test Fruit apple\nassert 'p' == 'a'\n  \n  - a\n  + p","time":{"start":1727902303905,"stop":1727902303905,"duration":0}}]},"tags":[]},"source":"626afdee5c96fdba.json","parameterValues":["'apple'"]}